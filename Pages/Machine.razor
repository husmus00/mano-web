
@page "/"

<div class="help-page @((help_active? "" : "inactive"))">
    <i @onclick="toggleHelpPage" class="fa-solid fa-xmark"></i>
    <h3>Help:</h3>
    <a href="https://github.com/husmus00/mano-machine-csharp/blob/main/instructions.txt">Instructions</a>
    <hr class="solid"/>
    <h3>Example Programs:</h3>
    <p @onclick="AdditionExample" class="example">Addition</p>
    <p @onclick="SubtractionExample" class="example">Subtraction</p>
    <hr class="solid"/>
    <p>Tip: Click on one of the example programs, then press "Assemble" and then "Run" to execute the assembly program. You can press "Print" to show the address symbol table and assembled program.</p>
</div>
<div class="wrapper-div">
    <div class="machine-container">
        <div class="title-bar">
            <h3>Mano Machine Emulator</h3>
            <div class="title-bar-end">
                <p @onclick="toggleHelpPage">Help</p>
                <a href="https://github.com/husmus00/mano-web"><i class="fa-brands fa-github"></i></a>
            </div>
        </div>
        <div class="input-output-windows">
            <div class="input-container">
                <div class="program-input box">
                    <div class="window-title-container">
                        <p class="window-title">Program Input</p>
                        <div class="hr-lines"></div>
                        <span>&#9781</span>
                    </div>
                    <div class="box-content">
                        <EditForm Model="@exampleModel" OnSubmit="@HandleInputSubmit" class="programTextForm">
                            <InputTextArea @bind-Value="programInput" class="programTextArea" />
                        </EditForm>
                    </div>
                </div>
                <div class="command-input box">
                    <div class="window-title-container">
                        <p class="window-title">Command Input</p>
                        <div class="hr-lines"></div>
                        <span>&#9781</span>
                    </div>
                    <div class="box-content command-input-line">
                        <p>>></p>
                        <div class="command-textbox-div">
                            <EditForm Model="@exampleModel" OnSubmit="@HandleCommandSubmit" class="command-input-form">
                                <InputText @bind-Value="commandInput" class="command-input-textbox" />
                            </EditForm>
                        </div>
                        <div class="run-command-button" @onclick="HandleCommandSubmit">Run Command</div>
                    </div>
                </div>
            </div>
            <div class="output-container box">
                <div class="window-title-container">
                    <p class="window-title">Output</p>
                    <div class="hr-lines"></div>
                    <span>&#9781</span>
                </div>
                <div class="box-content">
                    <textarea readonly class="outputTextArea">@outputText</textarea>
                </div>
            </div>
        </div>
        <div class="controls-container">
            <div class="controls">
                <div class="button">Load</div>
                <div class="button" @onclick="PrintButton">Print</div>
                <div class="button" @onclick="AssembleButton">Assemble</div>
                <div class="button" @onclick="RunButton">Run</div>
                <div class="button" @onclick="ClearButton">Clear</div>
            </div>
        </div>
    </div>
</div>


@code {
    private bool help_active = false;

    private void toggleHelpPage()
    {
        help_active = !help_active;
    }

    private void AdditionExample()
    {
        programInput = additionProgram;
        toggleHelpPage();
    }

    private void SubtractionExample()
    {
        programInput = subtractionProgram;
        toggleHelpPage();
    }

    string programInput = "";
    string commandInput = "";
    public static string outputText = "";

    public class ExampleModel
    {
        public string? Name { get; set; }
    }

    private ExampleModel exampleModel = new();

    private void HandleInputSubmit()
    {
        RunButton();
    }

    private void HandleCommandSubmit()
    {
        if (!string.IsNullOrEmpty(commandInput))
        {
            outputText += (">> " + commandInput + "\n");
            ComputerConsole.ParseCommand(commandInput);
            commandInput = "";
        }
    }

    private void HandleOutputSubmit()
    {
        RunButton();
    }

    private void PrintButton()
    {
        ComputerConsole.ParseCommand("print");
    }

    private void RunButton()
    {
        ComputerConsole.ParseCommand("run");
    }

    private void AssembleButton()
    {
        Computer.AssembleFromGUI(programInput);
    }

    private void ClearButton()
    {
        ComputerConsole.ParseCommand("clear");
        outputText = "";


    }

    Computer c = new Computer(AppMode.WebApp);

    private string additionProgram = @"   ORG 0    /Origin of program is location 0
   LDA A    /Load operand from location A
   ADD B    /Add operand from location B
   STA C    /Store sum in location C
   HLT      /Halt computer
A, DEC 83   /Decimal operand
B, DEC -23  /Decimal operand
C, DEC 0    /Sum stored in location C
   END      /End of symbolic program

/ Example program to demonstrate addition.
/ Table 6-5 page 178 ""Computer System Architecture"" 3rd Ed. Morris M. Mano.
/ This program will add the values at lines 6,7 (Labels A,B),
/ and store the result at line 8 (Label C)
/
/ To test this program, press ""Assemble"", and type the command ""print memory 6""
/ in the box below. Notice the output is 0. Now, press ""Run"" and type the same command.
/ The output should now show the result of adding the values at locations A & B!
/ Try changing values A & B. Both negative and positive numbers work.";


    private string subtractionProgram = @"     ORG 0    /Origin of program is location 0
     LDA SUB  /Load subtrahend to AC
     CMA      /Complement AC
     INC      /Increment AC   
     ADD MIN  /Add minuend to AC
     STA DIF  /Store difference
     HLT      /Halt computer
MIN, DEC 83   /Decimal operand
SUB, DEC -23  /Decimal operand
DIF, HEX 0    /Sum stored in location C
     END      /End of symbolic program

/ Example program to demonstrate subtraction.
/ Table 6-8 page 181 ""Computer System Architecture"" 3rd Ed. Morris M. Mano.
/ This program will subtract the values at lines 8,9 (Labels MIN,SUB),
/ and store the result at line 10 (Label DIF)
/
/ To test this program, press ""Assemble"", and type the command ""print memory 9""
/ in the box below. Notice the output is 0. Now, press ""Run"" and type the same command.
/ The output should now show the result of subtracting the values at locations A & B!
/ Try changing values A & B. Both negative and positive numbers work.";
}
